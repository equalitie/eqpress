<?php
/**
 * {{ansible_managed}}
 *
 * View customer web stats.
 *
 */
?>
<html><head><title>eqPress Web Stats on <?php echo $_SERVER['SERVER_NAME'] ?></title></head><body>
<form name="webstats" action="index.php" method="get">
website: <input type="text" name="site">
<input type="submit" value="Submit">
</form>
<?php
if ( isset( $_GET['site'] ) && is_valid_domain( $_GET['site'] ) ) {
	do_stats_month( $_GET['site'] );
} else {
	echo "not good";
}

?>
</body></html>

<?php
/**
 * Make sure the domain name entered is valid.
 *
 * @param string $domain is the domain name of the site to install.
 * @return boolean
 *
 */
function is_valid_domain( $domain ) {
	$ctr = 0;
	$subdomain = "";
	$pieces = explode( ".", $domain );
	if ( ( $num_pieces = sizeof( $pieces ) ) < 2)
		return false;
	foreach( $pieces as $piece ) {
		$ctr++;	
		if ( !preg_match( '/^[a-z\d][a-z\d-]{0,62}$/i', $piece ) || preg_match( '/-$/', $piece ) )
			return false;
	}
	return true;
}

/**
 * eqPress Console monthly website stats
 *
 * Connect to swp_webstats database to extract daily metrics and output a table,
 * CSV, JSON, YAML
 *
 */
function do_stats_month( $domain ) {
	$last_few_days = 0;
	$busiest_day = array( 0, 0, 0, 0, 0 );
	$db_query = "
		SELECT date, hits, visits, unique_visitors, bytes_transfered
		FROM stats WHERE domain_id
		IN (
			SELECT ID
			FROM domains
			WHERE domain LIKE '$domain')
		ORDER BY date DESC";
	$dbh = new mysqli( 'localhost', 'swp_webstats', '{{ mysql_webstats.password }}', 'swp_webstats' );
	if ( $dbh->connect_error ) {
		process_errors( "Connect failed to swp_webstats for domain $domain: " . $dbh->connect_errno . ' : ' . $dbh->connect_error, true );
	}
	if ( $db_results = $dbh->query( $db_query ) ) {
		$all_stats = $db_results->fetch_all();
		if ( !empty( $all_stats ) ) {
			echo "<h3>Monthly Stats</h3>";
			echo '<div class="CSSTableGenerator">';
			echo "<table border=1>\n";
			echo "<tr><td>Month</td><td>Hits</td><td>Visits</td><td>Unique Visitors</td><td>Transferred</td></tr>\n";
			$total_bytes = $month_hits = $month_visits = $month_uniques = $month_bytes = 0;
			$this_month = preg_replace( '/-[0-9][0-9]$/', '', $all_stats[0][0] );
			foreach ( $all_stats as $stats ) {
				if ( $busiest_day[3] < $stats[3] )
					$busiest_day = $stats;
				if ( $last_few_days < 31 ) {
					$daily_stats[] = $stats;
					$last_few_days++;
				}
				$total_bytes += $stats[4];
				$same_month = strpos( $stats[0], $this_month );
				if ( $same_month === false ) {
					//echo "Total Bandwith Utilized in $this_month: " . bytes_to_size( $month_bytes ) . '<br />';
					echo "<tr><td>$this_month</td><td>$month_hits</td><td>$month_visits</td><td>$month_uniques</td><td>";
					echo bytes_to_size( $month_bytes ) . "</td></tr>\n";
					$month_hits = $month_visits = $month_uniques = $month_bytes = 0;
					$month_bytes += $stats[4];
					$this_month = preg_replace( '/-[0-9][0-9]$/', '', $stats[0] );
				} else {
					$month_hits += $stats[1];
					$month_visits += $stats[2];
					$month_uniques += $stats[3];
					$month_bytes += $stats[4];
				}
			}
			echo "<tr><td>$this_month</td><td>$month_hits</td><td>$month_visits</td><td>$month_uniques</td><td>";
			echo bytes_to_size( $month_bytes ) . "</td></tr></table>\n</div>\n";
			//echo "Total Bandwith Utilized in $this_month: " . bytes_to_size( $month_bytes ) . '<br />';
			echo "Total Bandwith Utilized: " . bytes_to_size( $total_bytes ) . '<br />';
			echo "<h3>Busiest Day</h3>";
			echo '<div class="CSSTableGenerator">';
			echo "<table border=1>\n";
			echo "<tr><td>Date</td><td>Hits</td><td>Visits</td><td>Unique Visitors</td><td>Transferred</td></tr>\n";
			echo "<tr><td>$busiest_day[0]</td><td>$busiest_day[1]</td><td>$busiest_day[2]</td><td>$busiest_day[3]</td><td>";
			echo bytes_to_size( $busiest_day[4] ) . "</td></tr>\n";
			echo "</table>\n</div>\n";
			echo "<h3>Recent Daily Stats</h3>";
			echo '<div class="CSSTableGenerator">';
			echo "<table border=1>\n";
			echo "<tr><td>Date</td><td>Hits</td><td>Visits</td><td>Unique Visitors</td><td>Transferred</td></tr>\n";
			foreach ( $daily_stats as $ds ) {
				echo "<tr><td>$ds[0]</td><td>$ds[1]</td><td>$ds[2]</td><td>$ds[3]</td><td>";
				echo bytes_to_size( $ds[4] ) . "</td></tr>\n";
			}
			echo "</table>\n</div>";
		} else {
			echo "No stats yet.";
		}
	} else {
		process_errors( 'Results for query not found', true );
	}
	$dbh->close();
}

/**
 * bytes_to_size() - convert to readable format
 *
 * @param integer $bytes is the value to convert from bytes to something more readable
 * @param integer $precision is the number of decimal digits to calculate
 *
 */
function bytes_to_size($bytes, $precision = 2) {
	$kilobyte = 1024;
	$megabyte = $kilobyte * 1024;
	$gigabyte = $megabyte * 1024;
	$terabyte = $gigabyte * 1024;

	if (($bytes >= 0) && ($bytes < $kilobyte))
	{
		return $bytes . ' B';
	}
	elseif (($bytes >= $kilobyte) && ($bytes < $megabyte))
	{
		return round($bytes / $kilobyte, $precision) . ' KB';
	}
	elseif (($bytes >= $megabyte) && ($bytes < $gigabyte))
	{
		return round($bytes / $megabyte, $precision) . ' MB';
	}
	elseif (($bytes >= $gigabyte) && ($bytes < $terabyte))
	{
		return round($bytes / $gigabyte, $precision) . ' GB';
	}
	elseif ($bytes >= $terabyte)
	{
		return round($bytes / $terabyte, $precision) . ' TB';
	}
	else
	{
		return $bytes . ' B';
	}
}

---
- name: .bashrc for user
  ansible.builtin.template:
    src: etc/skel/.bashrc.j2
    dest: ~/.bashrc
    mode: 0600

- name: .bashrc for root user
  become: yes
  ansible.builtin.template:
    src: etc/skel/.bashrc.j2
    dest: /root/.bashrc
    mode: 0600

- name: hostname file
  become: yes
  ansible.builtin.template:
    src: etc/hostname.j2
    dest: /etc/hostname
    owner: root
    group: root
    mode: 0644
  when: not is_local

- name: apt cache
  become: yes
  ansible.builtin.apt:
    update_cache: yes
    cache_valid_time: 3600

- name: apt dist-upgrade
  become: yes
  ansible.builtin.apt:
    upgrade: dist

- name: common packages not local
  become: yes
  ansible.builtin.apt:
    name:
      - bc
      - iotop
      - logrotate
      - strace
      - ssl-cert
      - acl
    state: present
  when: not is_local

- name: common packages
  become: yes
  ansible.builtin.apt:
    name:
      - bash-completion
      - cron
      - curl
      - dnsutils
      - gawk
      - less
      - lsof
      - openssl
      - perl
      - rsync
      - screen
      - sudo
      - tzdata
      - unzip
      - vim
      - zip
      - bzip2
      - locales
      - software-properties-common
    state: present

- name: Setup locale
  become: yes
  ansible.builtin.template:
    src: etc/default/locale.j2
    dest: /etc/default/locale

- name: set locale.gen file
  become: yes
  ansible.builtin.locale_gen:
    name: "{{ locale_lang }}"
    state: present

# TODO: do we renenable these notify? Update method ? "update tzdata"

- name: set /etc/localtime
  become: yes
  ansible.builtin.copy:
    remote_src: yes
    src: "/usr/share/zoneinfo/{{ timezone }}"
    dest: "/etc/localtime"
    owner: root
    group: root
    mode: 0644
  tags:
    - tzone
#  notify:
#    - "update tzdata"

- name: set timezone
  become: yes
  ansible.builtin.timezone:
    name: "{{ timezone }}"
  tags:
    - tzone
#  notify:
#    - "update tzdata"

- name: Ensure the hostname entry for master is available for the client.
  become: yes
  ansible.builtin.lineinfile:
    dest: /etc/hosts
    regexp: "{{ mysql_repl_master }}"
    line: "{{ hostvars[mysql_repl_master].public_ipv4_address + ' ' + mysql_repl_master }}"
    state: present
  when:
    - mysql_repl_role is defined
    - mysql_repl_role == 'slave'
    - mysql_repl_master is defined

- name: Ensure the hostname entry for the slave is entered into hosts file
  become: yes
  ansible.builtin.lineinfile:
    dest: /etc/hosts
    regexp: "{{ mysql_repl_slave }}"
    line: "{{ hostvars[mysql_repl_slave].public_ipv4_address + ' ' + mysql_repl_slave }}"
    state: present
  when:
    - mysql_repl_role is defined
    - mysql_repl_role == 'master'
    - mysql_repl_slave is defined

- name: get some varibles set from json string of nodes
  ansible.builtin.set_fact:
    auto_provision_nodes_items: "{{ auto_provision_nodes | from_json | dict2items }}"
  when: auto_provision_host | default(false) | bool

- name: Ensure the hostname entry of node(s) are available on provision server.
  become: yes
  ansible.builtin.lineinfile:
    dest: /etc/hosts
    regexp: "{{ item['value'].hostname }}"
    line: "{{ item['value'].ip + ' ' + item['value'].hostname + ' # ' + item['key'] + ' cluster' }}"
    state: present
  when: auto_provision_host | default(false) | bool
  loop: "{{ auto_provision_nodes_items }}"

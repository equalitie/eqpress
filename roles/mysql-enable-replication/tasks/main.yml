---
# roles/mysql-enable-replication/tasks/main.yml

- name: stop the mysql server on the slave
  systemd:
    name: mysql
    state: stopped
  when: mysql_repl_role == 'slave'
  ignore_errors: yes
  tags:
    - mysql
    - mysql_resync

- name: Sleep awhile and then run a killall -9 on mysqld in case stuck
  shell: sleep 10 && killall -TERM mysqld ; sleep 5 ; killall -9 mysqld ; sleep 5
  when: mysql_repl_role == 'slave'
  ignore_errors: yes
  tags:
    - mysql
    - mysql_resync

- name: get the date
  shell: date "+%Y%m%d%H%M%S"
  register: the_date_time
  tags:
    - mysql
    - mysql_resync

- name: rename the mysql directory
  shell: mv /var/lib/mysql "/var/lib/mysql.{{ the_date_time.stdout }}"
  when: mysql_repl_role == 'slave'
  ignore_errors: yes
  tags:
    - mysql
    - mysql_resync

- name: create temp directory for transferring master snapshot
  file:
    path: /var/lib/mysql_master_snapshot
    state: directory
    owner: root
    group: root
    mode: '0700'
  when: mysql_repl_role == 'slave'
  tags:
    - mysql
    - mysql_resync

- name: Create the replication user on the master
  mysql_user:
    name: "{{ mysql_repl_creds.username }}"
    host: "{{item}}"
    password: "{{ mysql_repl_creds.password|default('password') }}"
    priv: '*.*:REPLICATION SLAVE'
    state: present
  loop:
    - "{{ mysql_repl_slave }}"
    - "{{ hostvars[mysql_repl_slave].public_ipv4_address }}"
  when: mysql_repl_role == 'master'
  tags:
    - mysql
    - repl
    - myuser
    - mysql_resync

- name: Create the mysqladmin user for replication monitoring on master
  mysql_user:
    name: "{{ mysql_admin_user.username }}"
    host: "{{item}}"
    password: "{{ mysql_admin_user.password|default('password') }}"
    priv: '*.*:SUPER,PROCESS'
    state: present
  with_items:
    - "{{ mysql_repl_slave }}"
    - "{{ hostvars[mysql_repl_slave].public_ipv4_address }}"
  when: mysql_repl_role == 'master'
  tags:
    - mysql
    - repl
    - mysqladmin_user
    - mysql_resync

- name: copy replication check script
  template:
    src: "{{ files }}/usr/local/sbin/check_mysql_replication_status.sh.j2"
    dest: /usr/local/sbin/check_mysql_replication_status.sh
    owner: root
    group: staff
    mode: '0750'
  when: mysql_repl_role == 'slave'
  tags:
    - mysql
    - repl
    - mysqladmin_user
    - repl_check_replication
    - monitoring-email

- name: run innobackupex to create the database snapshot and apply the log
  command: /usr/local/sbin/ep_setup_replication.sh
  register: path_to_snapshot
  when: mysql_repl_role == 'master'
  tags:
    - mysql
    - repl
    - innobackupex
    - mysql_resync

- name: make sure we delete old current_snap.tar.gz
  file:
    path: /tmp/current_snap.tar.gz
    state: absent
  tags:
    - mysql
    - repl
    - innobackupex
    - mysql_resync

- name: tar snapshot from master
  shell: cd /tmp ; tar cfz current_snap.tar.gz "{{ path_to_snapshot.stdout }}"
  when: mysql_repl_role == 'master'
  tags:
    - mysql
    - repl
    - innobackupex
    - mysql_resync

- name: scp current_snap.tar.gz to slave
  shell: scp /tmp/current_snap.tar.gz "{{ mysql_repl_slave }}:/tmp/"
  when: mysql_repl_role == 'master'
  tags:
    - mysql
    - repl
    - innobackupex
    - mysql_resync

- name: unarchive the current_snap.tar.gz
  shell: cd /tmp ; tar xvf current_snap.tar.gz -C /var/lib/mysql_master_snapshot
  when: mysql_repl_role == 'slave'
  tags:
    - mysql
    - repl
    - innobackupex
    - mysql_resync

- name: rename snapshot directory to mysql
  command: mv "/var/lib/mysql_master_snapshot{{ hostvars[mysql_repl_master].path_to_snapshot.stdout }}" /var/lib/mysql
  when: mysql_repl_role == 'slave'
  tags:
    - mysql
    - mysql_resync

- name: reset permissions on SSL key
  file:
    path: "/etc/ssl/eqpress/{{ inventory_hostname}}.key"
    owner: root
    group: mysql
    mode: '0640'
  when: mysql_repl_role == 'slave'
  tags:
    - mysql
    - ssl
    - mysql_resync

- name: copy auto.cnf to ensure unique mysql UUID
  command: cp "/var/lib/mysql.{{ the_date_time.stdout }}/auto.cnf" /var/lib/mysql
  when: mysql_repl_role == 'slave'
  tags:
    - mysql
    - mysql_resync

- name: create debian flag to avoid downgrades
  file:
    path: /var/lib/mysql/debian-{{mysql_percona_version}}.flag
    state: touch
    owner: root
    group: root
    mode: '0644'
  when: mysql_repl_role == 'slave'
  tags:
    - mysql
    - mysql_resync

- name: reset permissions on mysql directory
  shell: find /var/lib/mysql -type f -exec chmod 660 {} \; && find /var/lib/mysql -type d -exec chmod 700 {} \; && chown -R mysql:mysql /var/lib/mysql
  when: mysql_repl_role == 'slave'
  tags:
    - mysql
    - mysql_resync

# NOTE: Probably not needed, might be in future again
- name: create /etc/mysql/debian.cnf if does not exist
  file:
    path: /etc/mysql/debian.cnf
    state: touch
    owner: root
    group: root
    mode: '0600'
  tags:
    - mysql
    - mysql_resync

- name: copy debian specific mysql config
  command: scp {{ mysql_repl_master }}:/etc/mysql/debian.cnf /etc/mysql
  when: mysql_repl_role == 'slave'
  tags:
    - mysql
    - mysql_resync

- name: get the binlog file name
  shell: cat /var/lib/mysql/xtrabackup_binlog_info | awk '{print $1}'
  register: mysql_binlog_file
  when: mysql_repl_role == 'slave'
  tags:
    - mysql
    - repl
    - slaveon
    - mysql_resync

- name: get the binlog position
  shell: cat /var/lib/mysql/xtrabackup_binlog_info | awk '{print $2}'
  register: mysql_binlog_position
  when: mysql_repl_role == 'slave'
  tags:
    - mysql
    - repl
    - slaveon
    - mysql_resync

- name: create /var/lib/mysql/mysql_error.log because we can't start without it
  file:
    path: "/var/lib/mysql/{{item}}"
    state: touch
    owner: mysql
    group: mysql
    mode: '0660'
  with_items:
    - mysql_error.log
  tags:
    - mysql
    - repl
    - slaveon
    - mysql_resync

- name: start mysql on the replica
  systemd:
    name: mysql
    state: started
  when: mysql_repl_role == 'slave'
  ignore_errors: yes
  tags:
    - mysql
    - repl
    - slaveon
    - mysql_resync

- name: Change the master in slave to start the replication, this seems to always fail but it really does not
  mysql_replication:
    mode: changemaster
    master_host: "{{ mysql_repl_master }}"
    master_log_file: "{{ mysql_binlog_file.stdout }}"
    master_log_pos: "{{ mysql_binlog_position.stdout }}"
    master_user: "{{ mysql_repl_creds.username }}"
    master_password: "{{ mysql_repl_creds.password }}"
    master_ssl: true
    master_ssl_ca: /etc/ssl/eqpress/root_CA.pem
    master_ssl_cert: "/etc/ssl/eqpress/{{ inventory_hostname }}.pem"
    master_ssl_key: "/etc/ssl/eqpress/{{ inventory_hostname }}.key"
  when: mysql_repl_role == 'slave' and mysql_repl_master is defined
  ignore_errors: yes
  tags:
    - mysql
    - repl
    - slaveon
    - mysql_resync

- name: Start slave
  mysql_replication:
    mode: startslave
  when: mysql_repl_role == 'slave' and mysql_repl_master is defined
  tags:
    - mysql
    - repl
    - slaveon
    - mysql_resync

- name: remove the tmp current_snap.tar.gz
  file:
    path: /tmp/current_snap.tar.gz
    state: absent
  tags:
    - mysql
    - repl
    - slaveon
    - mysql_resync


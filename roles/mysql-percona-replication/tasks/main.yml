---
# roles/mysql-percona-replication/tasks/main.yml

- name: Add apt keys required for Percona
  apt_key:
    url: "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x9334A25F8507EFA5"
    state: present
  tags:
    - mysql

- name: Add repos for Percona
  apt_repository:
    repo: 'deb http://repo.percona.com/apt {{ansible_distribution_release}} main'
    state: present
    update_cache: yes
  tags:
    - mysql

- name: create mysql config directory
  file:
    path: "/etc/{{item}}"
    owner: root
    group: root
    mode: '0755'
    state: directory
  loop:
    - mysql
    - conf.d
    - mysql/percona-server.conf.d
  tags:
    - mysql
    - mysql_config

- name: Check if percona-server-server-{{mysql_percona_version}} is installed
  shell: dpkg-query -s percona-server-server-{{mysql_percona_version}} 2<&1 >/dev/null || echo "yes"
  register: dpkg_check
  tags:
    - mysql
    - mysql_config

- name: blank pre-install files
  copy:
    content: "[mysql]"
    dest: "{{item}}"
    owner: root
    group: root
    mode: '0644'
  when: dpkg_check.stdout is defined and dpkg_check.stdout != ""
  loop:
    - /etc/mysql/conf.d/mysql.cnf
    - /root/.my.cnf
  tags:
    - mysql
    - mysql_config

# Note: percona-xtrabackup-24 needs to be installed with
# percona 5.7. This could change to later versions
- name: Install packages
  apt:
    name:
      - percona-server-server-{{mysql_percona_version}}
      - percona-server-client-{{mysql_percona_version}}
      - percona-toolkit
      - percona-xtrabackup-24
      - python-mysqldb
    state: present
  tags:
   - mysql
   - apt-mysql
  register: pkg_install

# We need to make sure mysql is started unless next task will fail
- name: make sure mysql is started
  systemd:
    name: mysql
    state: started
  tags:
    - mysql
    - mysql_config
    - mysql_resync

- name: Update mysql root password for root account localhost.
  mysql_user:
    name: root
    host: localhost
    password: "{{ mysql_root_db_pass }}"
    state: present
    login_unix_socket: /var/run/mysqld/mysqld.sock
  tags:
    - mysql

- name: Copy .my.cnf file to /root/
  template:
    src: "{{ files }}/root/.my.cnf.j2"
    dest: /root/.my.cnf
    mode: '0600'
  tags:
    - mysql
    - mysql_config
    - mysql_resync

- name: Update mysql root password for all root accounts except localhost.
  mysql_user:
    name: root
    login_host: localhost
    host: "{{ item }}"
    password: "{{ mysql_root_db_pass }}"
    state: present
  loop:
    - 127.0.0.1
    - ::1
    - "{{ ansible_hostname }}"
    - "{{ inventory_hostname }}"
  tags:
    - mysql
    - mysql_resync

- name: Copy .my.cnf-mysqladmin file to /root/
  template:
    src: "{{ files }}/root/.my.cnf-mysqladmin.j2"
    dest: /root/.my.cnf-mysqladmin
    mode: '0600'
  when: mysql_repl_role is defined
  tags:
    - mysql
    - mysql_config
    - mysqladmin_user
    - mysql_resync

- name: ensure anonymous users are not in the database
  mysql_user:
    name: ''
    host: "{{ item }}"
    state: absent
  loop:
    - localhost
    - "{{ inventory_hostname }}"
  tags:
    - mysql
    - mysql_resync

- name: remove the test database
  mysql_db:
    name: test
    state: absent
  tags:
    - mysql
    - mysql_resync

- name: Create the mysqladmin user mysql server monitoring on slave
  mysql_user:
    name: "{{ mysql_admin_user.username }}"
    host: "{{ item }}"
    password: "{{ mysql_admin_user.password }}"
    priv: '*.*:SUPER,PROCESS'
    state: present
  loop:
    - localhost
    - "{{ inventory_hostname }}"
  when: mysql_repl_role is defined and mysql_repl_role == 'slave'
  tags:
    - mysql
    - repl
    - mysqladmin_user

- name: Create the mysqladmin user for replication monitoring on master
  mysql_user:
    name: "{{ mysql_admin_user.username }}"
    host: "{{ item }}"
    password: "{{ mysql_admin_user.password }}"
    priv: '*.*:SUPER,PROCESS'
    state: present
  loop:
    - localhost
    - "{{ inventory_hostname }}"
    - "{{ mysql_repl_slave }}"
    - "{{ hostvars[mysql_repl_slave].public_ipv4_address }}"
  when: mysql_repl_role is defined and mysql_repl_role == 'master'
  tags:
    - mysql
    - repl
    - mysqladmin_user
    - mysql_resync

- name: copy replication check script
  template:
    src: "{{ files }}/usr/local/sbin/check_mysql_replication_status.sh.j2"
    dest: /usr/local/sbin/check_mysql_replication_status.sh
    owner: root
    group: staff
    mode: '0750'
  when: mysql_repl_role is defined and mysql_repl_role == 'slave'
  tags:
    - mysql
    - repl
    - mysqladmin_user
    - repl_check_replication
    - monitoring-email
    - mysql_resync

- name: Create webstats user
  mysql_user:
    name: "{{ mysql_webstats.username }}"
    host: "localhost"
    password: "{{ mysql_webstats.password }}"
    priv: '*.*:ALL'
    state: present
  when: mysql_repl_role is defined and mysql_repl_role == 'master'
  tags:
    - mysql
    - webstats-db
    - mysql_resync

- name: Create webstats DB
  mysql_db:
    name: "{{ mysql_webstats.db }}"
    state: present
  when: mysql_repl_role is defined and mysql_repl_role == 'master'
  register: created_webstats
  tags:
    - webstats-db
    - mysql

- name: Copy webstats DB table structure to server
  template:
    src: "{{ files }}/etc/mysql/webstats.sql.j2"
    dest: /tmp/webstats.sql
  when: mysql_repl_role is defined and mysql_repl_role == 'master'
  tags:
    - webstats-db
    - mysql

- name: Create webstats tables
  mysql_db:
    name: "{{ mysql_webstats.db }}"
    state: import
    target: /tmp/webstats.sql
  when: mysql_repl_role is defined and
        mysql_repl_role == 'master' and
        created_webstats is defined and
        created_webstats.changed is defined and created_webstats.changed == True
  tags:
    - webstats-db
    - mysql

- name: install new config
  template:
    src: "{{files}}/etc/mysql/{{item}}.j2"
    dest: "/etc/mysql/{{item}}"
    owner: root
    group: root
    mode: '0644'
  loop:
    - conf.d/mysql.cnf
    - percona-server.conf.d/mysqld.cnf
  notify:
    - restart mysql
  tags:
    - mysql
    - mysql_config

#- name: get list of certs/keys in /var/lib/mysql
#  find:
#    paths: /var/lib/mysql
#    patterns: '*.pem'
#    recurse: false
#  register: pem_delete
#  tags:
#    - mysql
#    - mysql_config

# TODO: change from with_items to loop?
#- name: remove certs from /var/lib/mysql
#  file:
#    path: "{{ item.path }}"
#    state: absent
#  with_items:
#    - "{{ pem_delete.files }}"
#  tags:
#    - mysql
#    - mysql_config

- name: restart mysql when first install w/new config
  systemd:
    name: mysql
    state: restarted
  when: pkg_install.changed is defined and pkg_install.changed == true
  tags:
    - mysql

# This was in the enable-replication but needed here if we are just doing the upgrade
# TODO: Change this to use something like ufw

- name: add firewall rule to allow slave to connect to master
  command: /sbin/iptables -I INPUT -s {{ hostvars[mysql_repl_slave].public_ipv4_address }}/32 -p tcp -m state --state NEW -m tcp --dport 3306 -j ACCEPT
  when: mysql_repl_role is defined and
        mysql_repl_role == 'master'
  tags:
    - mysql
    - repl
    - security
    - firewall

- name: save new firewall rule
  shell: /sbin/iptables-save > /etc/iptables.up.rules
  when: mysql_repl_role is defined and
        mysql_repl_role == 'master'
  tags:
    - mysql
    - repl
    - security
    - firewall
